---
import { Icon } from "astro-icon";
---

<nav-bar>
  <button class="open" aria-label="Open navigation menu">
    <Icon name="ic:round-menu" />
  </button>
  <dialog>
    <button class="close" aria-label="Close navigation menu">
      <Icon name="ic:round-close" />
    </button>
    <nav>
      <a href="/">About</a>
      <a href="/">Contact</a>
      <a href="/">Projects</a>
    </nav>
  </dialog>
</nav-bar>

<script>
  customElements.define(
    "nav-bar",
    class extends HTMLElement {
      constructor() {
        super();
        const open = this.querySelector("button.open") as HTMLButtonElement;
        const close = this.querySelector("button.close") as HTMLButtonElement;
        const dialog = this.querySelector("dialog") as HTMLDialogElement;
        const closeDialog = () => {
          dialog.addEventListener(
            "transitionend",
            () => {
              dialog.close();
              dialog.classList.remove("closing");
            },
            { once: true }
          );
          dialog.classList.add("closing");
        };
        dialog.addEventListener("click", (ev) => {
          const { top, left, bottom, right } = dialog.getBoundingClientRect();
          if (
            ev.offsetX < left ||
            ev.offsetX > right ||
            ev.offsetY < top ||
            ev.offsetY > bottom
          )
            closeDialog();
        });
        open.addEventListener("click", () => dialog.showModal());
        close.addEventListener("click", closeDialog);
      }
    }
  );
</script>

<style lang="scss">
  $animation: 0.6s cubic-bezier(0.22, 1, 0.36, 1);

  nav-bar,
  button.open,
  [astro-icon] {
    height: 100%;
  }

  dialog {
    all: unset;
    position: fixed;
    inset: 0;
    left: 3rem;
    padding: 2rem;
    background-color: #272727;
    transition: transform $animation;

    &:not([open]),
    &.closing {
      transform: translate3d(100%, 0, 0);
    }

    button,
    [astro-icon] {
      height: 3rem;
      margin-bottom: 2rem;
    }

    &::backdrop {
      animation: darken $animation;
      transition: background-color $animation;
      background-color: rgba(0, 0, 0, 0.7);
    }

    &.closing::backdrop {
      background-color: rgba(0, 0, 0, 0);
    }

    &[open] a {
      opacity: 0;
      animation-name: fadeInRight;
      animation-duration: 0.6s;
      animation-timing-function: cubic-bezier(0.64, 0, 0.78, 0);
      animation-fill-mode: forwards;
      animation-direction: reverse; // safari bug mitigation

      &:focus-visible {
        text-decoration: underline;
      }
    }
  }

  nav {
    gap: 2rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  a {
    all: unset;
    font-size: 3rem;
    font-weight: bold;
    transition: transform 100ms cubic-bezier(0.22, 1, 0.36, 1);
    padding: 0.5rem;
    cursor: default;

    &:hover,
    &:focus-visible {
      transform: scale3d(110%, 110%, 100%);
    }

    @for $i from 0 to 3 {
      &:nth-child(#{$i + 1}) {
        animation-delay: $i * 50ms;
      }
    }
  }

  @media only screen and (min-width: 30em) {
    nav-bar {
      height: auto;
    }

    button.open {
      display: none;
    }

    dialog:not([open]) {
      display: contents;
      color: inherit;

      button.close {
        display: none;
      }

      nav {
        flex-direction: row;
      }

      a {
        font-size: 0.8rem;
      }
    }
  }

  @keyframes darken {
    0% {
      background-color: rgba(0, 0, 0, 0);
    }
    100% {
      background-color: rgba(0, 0, 0, 0.7);
    }
  }

  @keyframes fadeInRight {
    from {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }

    to {
      opacity: 0;
      transform: translate3d(100%, 0, 0);
    }
  }
</style>
